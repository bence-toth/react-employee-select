/* eslint-disable sonarjs/no-duplicate-string */
context('EmployeeSelect', () => {
  beforeEach(() => {
    cy.visit('http://localhost:3000/')
  })

  const component = '.employeeSelect'
  const input = '[data-role=queryInput]'
  const suggestions = '[data-role=suggestions]'
  const suggestion = '[data-role=suggestion]'
  const firstSuggestion = `${suggestion}:first-child button`
  const suggestionInFocus = 'button:focus'
  const selection = '[data-role=selection]'
  const removeSelectionButton = '[data-role=removeSelection]'
  const networkWaitInterval = 3500

  it('Type in input field and get suggestions', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('Tom')
      .should('have.value', 'Tom')
      .wait(networkWaitInterval)
    cy.get(component)
      .find(suggestions)
      .find(suggestion)
      .should(suggestionElements => {
        expect(suggestionElements, '2 suggestions').to.have.length(2)
        expect(suggestionElements.eq(0), 'First employee').to.contain('Tomas Hubbard')
        expect(suggestionElements.eq(1), 'Second employee').to.contain('Tommy Dixon')
      })
  })

  it('Use mouse to highlight suggestion', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('Tom')
      .should('have.value', 'Tom')
      .wait(networkWaitInterval)
    cy.get(firstSuggestion)
      .each(elements => {
        const event = document.createEvent('Event')
        event.initEvent('mousemove', true, true)
        elements[0].dispatchEvent(event)
      })
    cy.get(suggestionInFocus)
      .should('have.class', 'suggestion')
      .should('contain', 'Tomas Hubbard')
  })

  it('Use arrow keys to navigate between query input and suggestions', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('Tom')
      .should('have.value', 'Tom')
      .wait(networkWaitInterval)
      .type('{downarrow}')
    cy.get(component)
      .find(suggestionInFocus)
      .should('have.class', 'suggestion')
      .should('contain', 'Tomas Hubbard')
      .type('{downarrow}')
    cy.get(component)
      .find(suggestionInFocus)
      .should('have.class', 'suggestion')
      .should('contain', 'Tommy Dixon')
      .type('{downarrow}')
    cy.get(component)
      .find(suggestionInFocus)
      .should('have.class', 'suggestion')
      .should('contain', 'Tommy Dixon')
      .type('{uparrow}')
    cy.get(component)
      .find(suggestionInFocus)
      .should('have.class', 'suggestion')
      .should('contain', 'Tomas Hubbard')
      .type('{uparrow}')
    cy.focused()
      .should('have.class', 'queryInput')
      .should('have.value', 'Tom')
  })

  it('Scroll to bottom to get more suggestions', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('To')
      .should('have.value', 'To')
      .wait(networkWaitInterval)
    cy.get(component)
      .find(suggestions)
      .find(suggestion)
      .should(suggestionElements => {
        expect(suggestionElements, 'Exactly 6 suggestions').to.have.length(6)
      })
    cy.get(component)
      .find(suggestions)
      .scrollTo('bottom')
      .wait(networkWaitInterval)
    cy.get(component)
      .find(suggestions)
      .find(suggestion)
      .should(suggestionElements => {
        expect(suggestionElements.length, 'More than 6 suggestions').to.be.above(6)
      })
  })

  it('Select suggestion with mouse', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('Tom')
      .should('have.value', 'Tom')
    cy.get(component)
      .find(suggestions)
      .find(suggestion)
      .eq(1)
      .click()
    cy.get(component)
      .find(selection)
      .should('exist')
      .should(selectionElements => {
        expect(selectionElements.eq(0), 'Correct employee is selected').to.contain('Tommy Dixon')
      })
    cy.get(component)
      .find(removeSelectionButton)
      .should('exist')
      .click()
    cy.get(component)
      .find(selection)
      .should('not.exist')
  })

  it('Select suggestion with keyboard', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('Tom')
      .should('have.value', 'Tom')
      .wait(networkWaitInterval)
      .type('{downarrow}')
    cy.get(suggestionInFocus)
      .should('have.class', 'suggestion')
      .should('contain', 'Tomas Hubbard')
      .type('{downarrow}')
    cy.get(suggestionInFocus)
      .should('have.class', 'suggestion')
      .should('contain', 'Tommy Dixon')
      .click()
    cy.get(component)
      .find(selection)
      .should('exist')
      .should(selectionElements => {
        expect(selectionElements.eq(0), 'Correct employee is selected').to.contain('Tommy Dixon')
      })
    cy.get(component)
      .find(removeSelectionButton)
      .should('exist')
      .click()
    cy.get(component)
      .find(selection)
      .should('not.exist')
  })

  it('Shows no results message', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('xyz')
      .should('have.value', 'xyz')
      .wait(networkWaitInterval)
    cy.get(component)
      .find('.noResults')
      .should('exist')
  })

  it('Shows error message on network error', () => {
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('have.class', 'queryInput')
      .type('err')
      .should('have.value', 'err')
      .wait(networkWaitInterval)
    cy.get(component)
      .find('.fetchError')
      .should('exist')
  })

  it('Cannot focus input field when component is disabled', () => {
    cy.visit('http://localhost:3000/disabled')
    cy.get(component)
      .find(input)
      .focus()
    cy.focused()
      .should('not.exist')
  })
})
